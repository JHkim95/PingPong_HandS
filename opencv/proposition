# -*- coding: utf-8 -*-
"""
Created on Fri Aug 10 14:56:08 2018

@author: plandat
"""

# -*- coding: utf-8 -*-
"""
Created on Wed Aug  8 15:12:19 2018

@author: pland
"""

# import the necessary packages
from collections import deque
from imutils.video import VideoStream
import numpy as np
import argparse
import cv2
import imutils
import time
 
# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-v", "--video",
	help="path to the (optional) video file")
ap.add_argument("-b", "--buffer", type=int, default=64,
	help="max buffer size")
args = vars(ap.parse_args())

# define the lower and upper boundaries of the "green"
# ball in the HSV color space, then initialize the
# list of tracked points
lower_orange = np.array([10,100,50])  
upper_orange = np.array([70,245,250])
pts = deque(maxlen=args["buffer"])
 
# if a video path was not supplied, grab the reference
# to the webcam

vs = VideoStream(1).start()#수정 src=0을 1로 바꿈

# allow the camera or video file to warm up
time.sleep(2.0)
x_recent = []
z_recent = []
z_history = []
# keep looping
while True:
	# grab the current frame
    frame = vs.read()
 
	# handle the frame from VideoCapture or VideoStream
    frame = frame[1] if False else frame
 
	# if we are viewing a video and we did not grab a frame,q
	# then we have reached the end of the video
    if frame is None:
        break
 
	# resize the frame, blur it, and convert it to the HSV
	# color space
    frame = imutils.resize(frame, width=600)
    blurred = cv2.GaussianBlur(frame, (11, 11), 0)
    hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
 
	# construct a mask for the color "green", then perform
	# a series of dilations and erosions to remove any small
	# blobs left in the mask
    mask = cv2.inRange(hsv, lower_orange, upper_orange)
    mask = cv2.erode(mask, None, iterations=2)
    mask = cv2.dilate(mask, None, iterations=2)

	# find contours in the mask and initialize the current
	# (x, y) center of the ball
    cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
                            cv2.CHAIN_APPROX_SIMPLE)
    cnts = cnts[0] if imutils.is_cv2() else cnts[1]
    center = None
    x_coor = None
    z_coor = None
	# only proceed if at least one contour was found
    if len(cnts) > 0:
		# find the largest contour in the mask, then use
		# it to compute the minimum enclosing circle and
		# centroid
        c = max(cnts, key=cv2.contourArea)
        ((x, y), radius) = cv2.minEnclosingCircle(c)
        M = cv2.moments(c)
        x_coor = int(M["m10"] / M["m00"])
        z_coor = int(M["m01"] / M["m00"])
        center = (int(M["m10"] / M["m00"]),int(M["m01"] / M["m00"])) #here
        #print(center)
		# only proceed if the radius meets a minimum size
        if radius > 10:
			# draw the circle and centroid on the frame,
			# then update the list of tracked points
            cv2.circle(frame, (int(x), int(y)), int(radius),
				(0, 255, 255), 2)
            cv2.circle(frame, center, 5, (0, 0, 255), -1)
    
	# update the points queue
    pts.appendleft(center)
    x_recent.append(x_coor)
    z_recent.append(z_coor)
    
    
    if (len(x_recent) > 10):
            del x_recent[0]
  #  print("x_history")
 #   print (x_history)
    
    if (len(z_recent) > 10):
            del z_recent[0]
  #  print("y_history")
   # print (y_history)		# otherwise, compute the thickness of the line and

	# loop over the set of tracked points
    for i in range(1, len(pts)):
		# if either of the tracked points are None, ignore
		# them
        if pts[i - 1] is None or pts[i] is None:
            continue

		# draw the connecting lines
        thickness = int(np.sqrt(args["buffer"] / float(i + 1)) * 2.5)
        #cv2.line(frame, pts[i - 1], pts[i], (0, 0, 255), thickness)
    
	# show the frame to our screen
    cv2.imshow("Frame", frame)


    key = cv2.waitKey(1) & 0xFF
 
	# if the 'q' key is pressed, stop the loop
    if key == ord("q"):
        break

# if we are not using a video file, stop the camera video stream
if not args.get("video", False):
    vs.stop()
 
# otherwise, release the camera
else:
    vs.release()
 
# close all windows
cv2.destroyAllWindows()
