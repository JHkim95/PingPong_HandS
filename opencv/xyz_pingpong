# -*- coding: utf-8 -*-
"""
Created on Sat Aug 11 17:19:01 2018

@author: pland
"""

# -*- coding: utf-8 -*-
"""
Created on Fri Aug 10 14:56:08 2018

@author: plandat
"""

# -*- coding: utf-8 -*-
"""
Created on Wed Aug  8 15:12:19 2018

@author: pland
"""

# import the necessary packages
from collections import deque
from imutils.video import VideoStream
import numpy as np
import argparse
import cv2
import imutils
import time
import threading

#def __init__(self):
    
timing_h = 0
lock1 = threading.Lock()
timing_l = 0
lock2 = threading.Lock()    
ry = 600#나중에 진짜값으로 바꾸기. 레일의 y값.
gorob = 0 #로봇에게 전달하고 싶을때만 1
def opencv1():
    
    global timing_h
    global timing_l
    global lock1    
    global lock2
    global zh
    global lockzh
    
    
        
    # if a video path was not supplied, grab the reference
    # to the webcam
    # construct the argument parse and parse the arguments
    ap = argparse.ArgumentParser()
    ap.add_argument("-v", "--video",
    	help="path to the (optional) video file")
    ap.add_argument("-b", "--buffer", type=int, default=64,
    	help="max buffer size")
    args = vars(ap.parse_args())
    
    # define the lower and upper boundaries of the "green"
    # ball in the HSV color space, then initialize the
    # list of tracked points
    lower_orange = np.array([10,100,50])  
    upper_orange = np.array([70,245,250])
    pts = deque(maxlen=args["buffer"])
    vs = VideoStream(1).start()#수정 src=0을 1로 바꿈
    
    # allow the camera or video file to warm up
    time.sleep(2.0)
    y_recent = [] #경향성 체크
    z_recent = [] #경향성 체크
    z_history = [] #최저 최고 분별
    y_tend = [] #레일이 미리 이동해두기 위함.
    poss = 50 # 오류를 막기위한 상수, 없애거나 변경할 것.
    testh = 0 # 테스트용.
    testl = 0
    pastdown = 0
    pastup = 0
    lenrec= 20 #x,z 좌표를 recent에 몇개 저장할 것인가
    # keep looping
    while True:
    	# grab the current frame
        frame = vs.read()
     
    	# handle the frame from VideoCapture or VideoStream
        frame = frame[1] if False else frame
     
    	# if we are viewing a video and we did not grab a frame,q
    	# then we have reached the end of the video
        if frame is None:
            break
     
    	# resize the frame, blur it, and convert it to the HSV
    	# color space
        frame = imutils.resize(frame, width=600)
        blurred = cv2.GaussianBlur(frame, (11, 11), 0)
        hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
     
    	# construct a mask for the color "green", then perform
    	# a series of dilations and erosions to remove any small
    	# blobs left in the mask
        mask = cv2.inRange(hsv, lower_orange, upper_orange)
        mask = cv2.erode(mask, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)
    
    	# find contours in the mask and initialize the current
    	# (x, y) center of the ball
        cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
                                cv2.CHAIN_APPROX_SIMPLE)
        cnts = cnts[0] if imutils.is_cv2() else cnts[1]
        center = None
        y_coor = 0
        z_coor = 0
    	# only proceed if at least one contour was found
        if len(cnts) > 0:
    		# find the largest contour in the mask, then use
    		# it to compute the minimum enclosing circle and
    		# centroid
            c = max(cnts, key=cv2.contourArea)
            ((x, y), radius) = cv2.minEnclosingCircle(c)
            M = cv2.moments(c)
            y_coor = int(M["m10"] / M["m00"])
            z_coor = int(M["m01"] / M["m00"])
            center = (int(M["m10"] / M["m00"]),int(M["m01"] / M["m00"])) 
            #print(center)
    		# only proceed if the radius meets a minimum size
            if radius > 10:
    			# draw the circle and centroid on the frame,
    			# then update the list of tracked points
                cv2.circle(frame, (int(x), int(y)), int(radius),
    				(0, 255, 255), 2)
                cv2.circle(frame, center, 5, (0, 0, 255), -1)
        
    	# update the points queue
        pts.appendleft(center)
        y_recent.append(y_coor)
        z_recent.append(z_coor)
    
        
        if (len(y_recent) > lenrec):
            del y_recent[0]
            
    
            
      #  print("x_history")
     #   print (x_history)
        
        if (len(z_recent) > lenrec):
            del z_recent[0]
#        print(z_recent)        
        if len(z_recent) == lenrec:
            plus = 0
            minus = 0
            equ = 0
            for i in range(1, len(z_recent)): 
                if (z_recent[i]) < (z_recent[i-1]):
                    plus += 1
                if (z_recent[i]) > (z_recent[i-1]):
                    minus += 1
                if (z_recent[i]) == (z_recent[i-1]):
                    equ += 1            
            if plus > (lenrec - equ)/2 * 1.4 :
                nowup = 1
                if pastdown == 1:
                    z_low = min(z_recent)
                    lpoint = z_recent.index(z_low) #최저값의 리스트 위치
                    y_low = (y_recent[lpoint])
                    print("lowest")
                    testl += 1
                  
                    #lock1.acquire()
                    timing_l = 1
                    #lock1.release()
                
                pastup = 1
                pastdown = 0
    
    
                    
            if minus > (lenrec - equ)/2 * 1.4 :
                nowdown = 1
                if pastup == 1:
                    z_high = max(z_recent)
                    hpoint = z_recent.index(z_high) #최고값의 리스트 위치
                    y_low = (y_recent[hpoint])
                    print("highest")
                    testh += 1
                    
                    #lock2.acquire()
                    timing_h = 1
                    #lock2.release()      
                    #lock1.acquire()
                    timing_l = 0
                    #lock2.release()
    
                pastup = 0
                pastdown = 1
                
                    
        
      #  print("y_history")
       # print (y_history)		# otherwise, compute the thickness of the line and
    
    	# loop over the set of tracked points
        for i in range(1, len(pts)):
    		# if either of the tracked points are None, ignore
    		# them
            if pts[i - 1] is None or pts[i] is None:
                continue
    
    		# draw the connecting lines
       #     thickness = int(np.sqrt(args["buffer"] / float(i + 1)) * 2.5)
            #cv2.line(frame, pts[i - 1], pts[i], (0, 0, 255), thickness)
        
    	# show the frame to our screen
        cv2.imshow("Frame", frame)
    
    
        key = cv2.waitKey(1) & 0xFF
     
    	# if the 'q' key is pressed, stop the loop
        if key == ord("q"):
            break
    
    print(testh)
    print(testl)
    # if we are not using a video file, stop the camera video stream
    if not args.get("video", False):
        vs.stop()
     
    # otherwise, release the camera
    else:
        vs.release()
     
    # close all windows
    cv2.destroyAllWindows()
    
def opencv2():
    global timing_h
    global timing_l
    global lock1
    global lock2
    global gorob

    ap = argparse.ArgumentParser()
    ap.add_argument("-v", "--video",
    	help="path to the (optional) video file")
    ap.add_argument("-b", "--buffer", type=int, default=64,
    	help="max buffer size")
    args = vars(ap.parse_args())
    lower_orange = np.array([10,100,50])  
    upper_orange = np.array([70,245,250])
    pts = deque(maxlen=args["buffer"])
    vs = VideoStream(2).start()
    time.sleep(2.0)
    x_history = [] #경향성 체크
    y_history = [] #경향성 체크
    x_tend2 = [] #레일이 미리 이동해두기 위함. 추가 필요
    #testh = 0 # 테스트용.
    #testl = 0
    #pastdown = 0
    #pastup = 0
    lenrec= 20 #x,z 좌표를 recent에 몇개 저장할 것인가
    # define the lower and upper boundaries of the "green"
    # ball in the HSV color space, then initialize the
    # list of tracked points
    lower_orange = np.array([10,100,50])  
    upper_orange = np.array([70,245,250])
    pts = deque(maxlen=args["buffer"])

    while True:
    	# grab the current frame
        frame = vs.read()
     
    	# handle the frame from VideoCapture or VideoStream
        frame = frame[1] if False else frame
     
    	# if we are viewing a video and we did not grab a frame,q
    	# then we have reached the end of the video
        if frame is None:
            break
     
    	# resize the frame, blur it, and convert it to the HSV
    	# color space
        frame = imutils.resize(frame, width=600)
        blurred = cv2.GaussianBlur(frame, (11, 11), 0)
        hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
     
    	# construct a mask for the color "green", then perform
    	# a series of dilations and erosions to remove any small
    	# blobs left in the mask
        mask = cv2.inRange(hsv, lower_orange, upper_orange)
        mask = cv2.erode(mask, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)
    
    	# find contours in the mask and initialize the current
    	# (x, y) center of the ball
        cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
                                cv2.CHAIN_APPROX_SIMPLE)
        cnts = cnts[0] if imutils.is_cv2() else cnts[1]
        center = None
        y_coor2 = 0
        x_coor2 = 0
    	# only proceed if at least one contour was found
        if len(cnts) > 0:
    		# find the largest contour in the mask, then use
    		# it to compute the minimum enclosing circle and
    		# centroid
            c = max(cnts, key=cv2.contourArea)
            ((x, y), radius) = cv2.minEnclosingCircle(c)
            M = cv2.moments(c)
            y_coor2 = int(M["m10"] / M["m00"])
            x_coor2 = int(M["m01"] / M["m00"])
            center = (int(M["m10"] / M["m00"]),int(M["m01"] / M["m00"])) 
            #print(center)
    		# only proceed if the radius meets a minimum size
            if radius > 10:
    			# draw the circle and centroid on the frame,
    			# then update the list of tracked points
                cv2.circle(frame, (int(x), int(y)), int(radius),
    				(0, 255, 255), 2)
                cv2.circle(frame, center, 5, (0, 0, 255), -1)
        
    	# update the points queue
        pts.appendleft(center)
        
        #최고, 최저점에 다다랐을때의 x,y를 저장.
        
        hh = timing_h
        if hh == 1:
            xh = (x_coor2)
            yh = (y_coor2)
            
        ll = timing_l
        if (hh == 1) and (ll == 1):
            xl = x_coor2
            yl = y_coor2
            hh=0
            ll=0
            if (yh-yl) != 0:
                rx = xl - ((yh-ry)*(xh-xl))/(yh-yl)
                rz = zh * (yl - ry) / (yh - yl)
                gorob = 1
            else:
                print("error: yh와 yl이 같습니다.")
                gorob = 1
        if gorob == 1:
            #여기에 통신 코드를 집어넣고 로봇에게 전달한다.
            #통신 잘 되면 로봇팔 xz가 비독립적이므로 그부분을 보완한다.
            gorob = 0
            
        for i in range(1, len(pts)):
    		# if either of the tracked points are None, ignore
    		# them
            if pts[i - 1] is None or pts[i] is None:
                continue
    
    		# draw the connecting lines
       #     thickness = int(np.sqrt(args["buffer"] / float(i + 1)) * 2.5)
            #cv2.line(frame, pts[i - 1], pts[i], (0, 0, 255), thickness)
        
    	# show the frame to our screen
        cv2.imshow("Frame2", frame)
    
    
        key = cv2.waitKey(1) & 0xFF
     
    	# if the 'q' key is pressed, stop the loop
        if key == ord("q"):
            break            
                
        

    # if we are not using a video file, stop the camera video stream
    if not args.get("video", False):
        vs.stop()
     
    # otherwise, release the camera
    else:
        vs.release()
     
    # close all windows
    cv2.destroyAllWindows()
        
    
fir = threading.Thread(target = opencv1, )
fir.start()
sec = threading.Thread(target = opencv2,)
sec.start()
